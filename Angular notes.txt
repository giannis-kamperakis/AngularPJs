Section 5
SPA (Single Page Application) = A Single Pahe Application is an app that doesn't need to reload the page during its use and works within a Web Browser. The files that contain the code for the site are being dowloaded in the Web Browser that's why the page isn't being loaded again.

With the use of Angular CLI it is easy to create and develop an Angular project. In order to download the Angular CLI we have to install first the node package manager (Node.js). In order to install the Angular CLI we have to run the followin command "npm install -g @angular/cli" and then in order to creat a new project we have to run the following command "ng new <Project-name>"



Section 6
Angular is a component based framework. A component is a combination of data html template and logics. The component represent an area of a view that shows inside the browser. We can reuse components (nav-bar etc.) For every area we can create a specific component.

We can use the selectors of every component into the html of every component. So we can call different components inside of the html of another component.

In order to generate an Angular component using the Angular CLI we have to use the following command "ng g c <component-name>". The files component.spec.ts are responsible for unit testing.

NgOnInit = the NgOnInit is going to run when the current component is fully loaded in the browser. OnInit is a template.

Data binding = {{title}}

Share data between components = Parent to child component via @input decorator, child to parent component via @output decorator, child to parent when there is Event using the @output decorator and event emitter
Share data from the child components to parent component -> @ViewChild, @Output or Emitter.



Section 7

String interpolation = in order to show information of a variable, or anything else we must use the string interpolation. An example of it is the following, {{ message }}

Property binding = <img [src]="imgURL" alt="googleImages"> or <img src="{{ imgURL }}" alt="googleImages">

Class binding = <p [class.text-red] = "boolFlag">{{messageFromChild}}</p>

Style binding = <h2 [style.color] = "boolFlag ? 'red' : 'blue'"> Style Binding </h2>, in order to bind and pass some styling to different elements we have to check the DOM style object (https://www.w3schools.com/jsref/dom_obj_style.asp)

Event binding = <button (click)="buttonClick()"> Click me Again! </button>

Event filtering = <input type="text" (keyup)= "onKeyup($event)"> 

Template variable = <input type="text" (keyup)= "showTemplateVariable($event)">

Two way data binding = app.module.ts -> import FormsModule, app.component.html -> [(ngModel)]

Two way vs One way data binding = With one way data binding I can send data from the component to the View but with the two way binding I can send data from the component to the view and vice versa



Section 8

Directives are components without a view. Angular components are directives with a view. We have different types of directives:
- Component directive = which is an angular directive with a template view
- Structural directive = which can change the DOM layout by adding and removing DOM elements
- Attribute directive = which can change the appearance or behavior of an element, component, or another directive
- Custom directive = which can create our custom directive from scratch
Generally directives are classes that add additional behavior to elements in any Angular applications. USe Angular's built-in directives to manage forms, lists, styles and what users see.

*ngFor Directive = We use it to render an array inside the view, it is a structural directive, we can manipulate the DOM,   <li *ngFor="let str of stringArray"> {{str}} </li>

Fetching object array using NgFor =   <li *ngFor="let obj of objectArray"> {{obj.id}}, {{obj.postName}} </li>

Angular change detection = created 2 functions addNew() , onDelete(post)

ngFor directive index = we used an alternative on how we can send the index to the js function

ngIF directive = I created an example in the code 

ngTemplate = we use the ngTemplate to render html in a template, in our view

(Structural directive) ngSwitchCase = created an example in the code

(Attribute directive) ngStyle = created an example in the code

(Attribute directive) ngClass = with ngClass we can pass classed to the elements of our html files

Structural vs Attribute directive = with structural directives we can manipulate the objects from the DOM, we can insert them etc. With Attribute directives we have change the appearance of the DOM objects.



Section 9

Angular Pipes = they are used to transform the data into a particular format when we only need that data transformed 'in' a template or the HTML view. Some types of Pipes are the following:
- Uppercase Pipe
- Lowercase Pipe
- Decimal / Number Pipe
- Currency Pipe
- Date Pipe
- JSON Pipe
- Precent Pipe
- Slice Pipe

Uppercase , Lowercase pipe = {{ title | uppercase }} , {{ title | lowercase }}

Number pipe = {{ count | number }}, {{ count | number: '1.2-2' }}

Currency pipe = {{ price | currency: "JPY" : false : 2.1-1}}, iban.com/currency-codes

Date pipe = angular.io/api/common/DatePipe

JSON pipe = {{ postObj | json }}

Percent pipe = {{ 0.567 | percent : '1.1-1' }}

Slice pipe = {{ postArray | slice 2:4` }}

Customer pipe = new folders under app folder, for example append.pipe.ts, we have also to import the custom pipe into the file app.module.ts

Custom pipes using angular cli = ng g pipe Pipes/appendCLI